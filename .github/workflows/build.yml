name: iOS unsigned build (static)

on:
  workflow_dispatch:

env:
  USE_WORKSPACE: "false"
  WORKSPACE: "winston.xcworkspace"
  PROJECT:  "winston.xcodeproj"
  SCHEME:   "winston"
  CATALOG_PATH: "winston/Assets.xcassets"
  APPICON_NAME: "iconStandard"   # set to one of your actual *.appiconset basenames
  SKIP_ASSETS: "false"           # switch to "true" to bypass assets and confirm the rest compiles

jobs:
  build:
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4

      - name: Select Xcode 16.x
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.*'

      - name: Show tool versions
        run: |
          xcodebuild -version
          swift --version
          xcrun --find actool || true
          xcrun --find assetutil || true

      - name: Validate AppIcon set exists
        run: |
          set -euo pipefail
          echo "Using APPICON_NAME=$APPICON_NAME"
          if ! find "$CATALOG_PATH" -type d -name "${APPICON_NAME}.appiconset" | grep -q .; then
            echo "::error ::'${APPICON_NAME}.appiconset' not found in $CATALOG_PATH"
            echo "Available sets:"; find "$CATALOG_PATH" -type d -name "*.appiconset" -print
            exit 1
          fi

      - name: Show build settings (icon + target)
        run: |
          xcodebuild -showBuildSettings -project "$PROJECT" -scheme "$SCHEME" | \
            grep -E "ASSETCATALOG_COMPILER_APPICON_NAME|PRODUCT_BUNDLE_IDENTIFIER|IPHONEOS_DEPLOYMENT_TARGET" || true
          echo "Will override AppIcon to: $APPICON_NAME"

      # -------- Asset probes (human-readable) ----------
      - name: actool full-catalog probe
        run: |
          set -euo pipefail
          mkdir -p diagnostics/compiled-full
          # NOTE: catalog path is LAST; no --verbose on Xcode 16
          xcrun actool \
            --compile diagnostics/compiled-full \
            --platform iphoneos \
            --minimum-deployment-target 18.0 \
            --app-icon "$APPICON_NAME" \
            --output-partial-info-plist diagnostics/asset-info.plist \
            --warnings --errors --notices \
            "$CATALOG_PATH" \
            > diagnostics/actool-full.out 2> diagnostics/actool-full.err || true

          echo "==== actool stderr (first 200 lines) ===="
          sed -n '1,200p' diagnostics/actool-full.err || true
          echo "==== actool stdout (first 80 lines) ===="
          sed -n '1,80p'  diagnostics/actool-full.out || true

      - name: assetutil per-set audit
        run: |
          set -euo pipefail
          mkdir -p diagnostics/assetutil
          # Check every set for structural problems and missing files
          while IFS= read -r -d '' SET; do
            REL="${SET#"$CATALOG_PATH/"}"
            OUT="diagnostics/assetutil/${REL//\//__}.json"
            # assetutil emits JSON describing issues; we capture stderr too
            xcrun assetutil --info "$SET" >"$OUT" 2>>diagnostics/assetutil/_stderr.log || true
          done < <(find "$CATALOG_PATH" -type d \( -name "*.appiconset" -o -name "*.imageset" -o -name "*.symbolset" -o -name "*.colorset" \) -print0)

          echo "==== assetutil stderr (first 200 lines) ===="
          sed -n '1,200p' diagnostics/assetutil/_stderr.log || true

          # Quick grep for common problems
          echo "==== quick scan for issues ===="
          (grep -RHiE '"errors"|"warnings"|missing|unsupported|invalid' diagnostics/assetutil || true) | head -n 200

      - name: Upload asset diagnostics
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: asset-diagnostics
          path: diagnostics
          if-no-files-found: ignore

      # -------- Real archive (with override, or skip assets) ----------
      - name: Archive (unsigned)
        shell: bash
        run: |
          set -euo pipefail
          ARCHIVE_PATH="$PWD/build/App.xcarchive"
          FLAGS=()
          if [[ "${SKIP_ASSETS}" == "true" ]]; then
            echo "⚠️  Skipping asset compilation"
            FLAGS+=(ASSETCATALOG_COMPILER_SKIP_ASSETS=YES)
          else
            FLAGS+=(ASSETCATALOG_COMPILER_APPICON_NAME="$APPICON_NAME")
          fi

          if [[ "${USE_WORKSPACE}" == "true" ]]; then
            xcodebuild -workspace "$WORKSPACE" \
              -scheme "$SCHEME" -configuration Release \
              -destination 'generic/platform=iOS' \
              CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY="" \
              "${FLAGS[@]}" \
              clean archive -archivePath "$ARCHIVE_PATH"
          else
            xcodebuild -project "$PROJECT" \
              -scheme "$SCHEME" -configuration Release \
              -destination 'generic/platform=iOS' \
              CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY="" \
              "${FLAGS[@]}" \
              clean archive -archivePath "$ARCHIVE_PATH"
          fi

      - name: Package unsigned IPA
        run: |
          APP_DIR="$PWD/build/App.xcarchive/Products/Applications"
          rm -rf Payload
          mkdir -p Payload
          cp -R "$APP_DIR"/*.app Payload/
          zip -qry app-unsigned.ipa Payload
          ls -lah app-unsigned.ipa

      - uses: actions/upload-artifact@v4
        with:
          name: ios-unsigned-ipa
          path: app-unsigned.ipa
          if-no-files-found: error
