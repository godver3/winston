name: iOS unsigned build (static)

on:
  workflow_dispatch:

env:
  USE_WORKSPACE: "false"
  WORKSPACE: "winston.xcworkspace"
  PROJECT:  "winston.xcodeproj"
  SCHEME:   "winston"
  CATALOG_PATH: "winston/Assets.xcassets"
  APPICON_NAME: "iconStandard"   # set to one of your actual *.appiconset basenames
  SKIP_ASSETS: "false"           # set to "true" to bypass assets and confirm the rest compiles

jobs:
  build:
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4

      - name: Select Xcode 16.x
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.*'

      - name: Show tool versions
        run: |
          xcodebuild -version
          swift --version
          xcrun --find actool || true

      - name: Validate AppIcon set exists
        run: |
          set -euo pipefail
          echo "Using APPICON_NAME=$APPICON_NAME"
          if ! find "$CATALOG_PATH" -type d -name "${APPICON_NAME}.appiconset" | grep -q .; then
            echo "::error ::'${APPICON_NAME}.appiconset' not found in $CATALOG_PATH"
            echo "Available sets:"; find "$CATALOG_PATH" -type d -name "*.appiconset" -print
            exit 1
          fi

      - name: Show build settings (icon + target)
        run: |
          xcodebuild -showBuildSettings -project "$PROJECT" -scheme "$SCHEME" | \
            grep -E "ASSETCATALOG_COMPILER_APPICON_NAME|PRODUCT_BUNDLE_IDENTIFIER|IPHONEOS_DEPLOYMENT_TARGET" || true
          echo "Will override AppIcon to: $APPICON_NAME"

      # ---------- Better asset probes ----------
      - name: actool full-catalog probe
        run: |
          set -euo pipefail
          mkdir -p diagnostics/compiled-full
          # NOTE: catalog path goes LAST on Xcode 16; no --verbose
          xcrun actool \
            --compile diagnostics/compiled-full \
            --platform iphoneos \
            --minimum-deployment-target 18.0 \
            --app-icon "$APPICON_NAME" \
            --output-partial-info-plist diagnostics/asset-info.plist \
            --warnings --errors --notices \
            "$CATALOG_PATH" \
            > diagnostics/actool-full.out 2> diagnostics/actool-full.err || true

          echo "==== actool stderr (first 200 lines) ===="
          sed -n '1,200p' diagnostics/actool-full.err || true
          echo "==== actool stdout (first 80 lines) ===="
          sed -n '1,80p'  diagnostics/actool-full.out || true

      - name: Python asset audit (find missing/invalid files)
        run: |
          set -euo pipefail
          python3 - << 'PY'
          import json, os, sys
          root = os.environ.get("CATALOG_PATH", "winston/Assets.xcassets")
          report_lines = []
          bad = 0

          for dirpath, dirnames, filenames in os.walk(root):
              if not any(dirpath.endswith(suf) for suf in (".imageset", ".appiconset", ".colorset", ".symbolset")):
                  continue
              cj = os.path.join(dirpath, "Contents.json")
              rel = os.path.relpath(dirpath, root)
              if not os.path.isfile(cj):
                  report_lines.append(f"❌ {rel}: missing Contents.json")
                  bad += 1
                  continue
              try:
                  with open(cj, "r", encoding="utf-8") as f:
                      data = json.load(f)
              except Exception as e:
                  report_lines.append(f"❌ {rel}: invalid JSON: {e}")
                  bad += 1
                  continue

              # gather referenced filenames
              referenced = set()
              def collect(d):
                  if isinstance(d, dict):
                      for k,v in d.items():
                          if k == "filename" and isinstance(v, str):
                              referenced.add(v)
                          else:
                              collect(v)
                  elif isinstance(d, list):
                      for x in d: collect(x)
              collect(data)

              # check each referenced file exists
              for fn in sorted(referenced):
                  if not fn: 
                      continue
                  p = os.path.join(dirpath, fn)
                  if not os.path.isfile(p):
                      report_lines.append(f"❌ {rel}: references missing file '{fn}'")
                      bad += 1

              # minimal sanity: AppIcon sets should have at least one 1024 universal or a vector
              if dirpath.endswith(".appiconset"):
                  imgs = [i for i in (data.get("images") or []) if isinstance(i, dict)]
                  has_1024 = any(i.get("size") == "1024x1024" and (i.get("idiom") in (None,"universal")) for i in imgs)
                  # allow PDF-only vector sets if present (no filename rule here)
                  if not has_1024 and not referenced:
                      report_lines.append(f"⚠️  {rel}: no raster filenames and no 1024x1024 entry; ensure vector App Icon is valid")
              if not referenced and (dirpath.endswith(".imageset") or dirpath.endswith(".colorset")):
                  # empty set (can be intentional for named colors), just warn for imageset
                  if dirpath.endswith(".imageset"):
                      report_lines.append(f"⚠️  {rel}: imageset lists no files")

          os.makedirs("diagnostics", exist_ok=True)
          with open("diagnostics/asset-audit.txt", "w", encoding="utf-8") as f:
              f.write("\n".join(report_lines) if report_lines else "No problems detected.\n")

          print("---- Asset audit summary ----")
          print("\n".join(report_lines) if report_lines else "No problems detected.")
          # don't fail the job here; actool will fail the archive if it's truly broken
          PY

      - name: Upload asset diagnostics
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: asset-diagnostics
          path: diagnostics
          if-no-files-found: ignore

      # ---------- Real archive (override or skip assets) ----------
      - name: Archive (unsigned)
        shell: bash
        run: |
          set -euo pipefail
          ARCHIVE_PATH="$PWD/build/App.xcarchive"
          FLAGS=()
          if [[ "${SKIP_ASSETS}" == "true" ]]; then
            echo "⚠️  Skipping asset compilation"
            FLAGS+=(ASSETCATALOG_COMPILER_SKIP_ASSETS=YES)
          else
            FLAGS+=(ASSETCATALOG_COMPILER_APPICON_NAME="$APPICON_NAME")
          fi

          if [[ "${USE_WORKSPACE}" == "true" ]]; then
            xcodebuild -workspace "$WORKSPACE" \
              -scheme "$SCHEME" -configuration Release \
              -destination 'generic/platform=iOS' \
              CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY="" \
              "${FLAGS[@]}" \
              clean archive -archivePath "$ARCHIVE_PATH"
          else
            xcodebuild -project "$PROJECT" \
              -scheme "$SCHEME" -configuration Release \
              -destination 'generic/platform=iOS' \
              CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY="" \
              "${FLAGS[@]}" \
              clean archive -archivePath "$ARCHIVE_PATH"
          fi

      - name: Package unsigned IPA
        run: |
          APP_DIR="$PWD/build/App.xcarchive/Products/Applications"
          rm -rf Payload
          mkdir -p Payload
          cp -R "$APP_DIR"/*.app Payload/
          zip -qry app-unsigned.ipa Payload
          ls -lah app-unsigned.ipa

      - uses: actions/upload-artifact@v4
        with:
          name: ios-unsigned-ipa
          path: app-unsigned.ipa
          if-no-files-found: error
